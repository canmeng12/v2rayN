name: .NET Core Desktop

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:

  build:

    strategy:
      matrix:
        configuration: [Release]

    runs-on: windows-latest  # For a list of available runner types, refer to
                             # https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on

    env:
      Solution_Name: v2rayN\v2rayN.sln
      Test_Project_Path: v2rayN\v2rayN\v2rayN.csproj                 # Replace with the path to your test project, i.e. MyWpfApp.Tests\MyWpfApp.Tests.csproj.
      Wap_Project_Directory: v2rayN\v2rayN\bin
      #Wap_Project_Path: your-wap-project-path                   # Replace with the path to your Wap project, i.e. MyWpf.App.Package\MyWpfApp.Package.wapproj.

    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    # Install the .NET Core workload
    - name: Install .NET Core
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 6.0.x

    # Add  MSBuild to the PATH: https://github.com/microsoft/setup-msbuild
    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v1.3.1

    # Restore the application to populate the obj folder with RuntimeIdentifiers
    - name: Restore the application
 #     run: dotnet build  $env:Solution_Name --configuration Release  -o $env:Wap_Project_Directory
      run:  
        cd .\v2rayN\ &&
        dotnet publish `
        -c $Configuration `
        -r 'win-x64' `
        -p:Platform='x64' `
        -p:SelfContained=$True `
        -p:PublishTrimmed=$False `
        -p:PublishSingleFile=$True `
        -p:PublishReadyToRun=$False `
        -p:PublishReadyToRunShowWarnings=$False `
        -p:IncludeNativeLibrariesForSelfExtract=$True `
        -o ".\v2rayN\bin\$Configuration" `
        '.\v2rayN\v2rayN.csproj'  -Configuration Release -OutputPath release

    # Upload the MSIX package: https://github.com/marketplace/actions/upload-a-build-artifact
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: bin
        path: ${{ env.Wap_Project_Directory }}
      



      

